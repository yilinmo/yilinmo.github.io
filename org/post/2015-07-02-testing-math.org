#+OPTIONS:   H:4 num:nil toc:nil author:nil timestamp:nil tex:t 
#+BEGIN_HTML
---
layout: post
title: Testing Math
---
#+END_HTML

This page originates in an =org-mode= written document and has been
written to create a reference of things that are (im-)possible using
the direct org to html conversion. This text would be ignored by
jekyll if the option =skip:t= was specified as an option. ( *CHECK* : is
the content available as excerpt then? )

The frontmatter is parsed by jekyll, obviously


* Header level 1
  This page contains org-mode constructs as a test to see how they get
  rendered to html. It's the visual last test to see if I have gotten
  the css stuff right. The page will be updated each time a css change
  is made so it can be checked without having to hunt for content which
  uses a special construct.
** Header level 2
   This page contains org-mode constructs as a test to see how they
   get rendered to html. It's the visual last test to see if I have
   gotten the css stuff right. The page will be updated each time a
   css change is made so it can be checked without having to hunt for
   content which uses a special construct.
*** Header level 3
    This page contains org-mode constructs as a test to see how they
    get rendered to html. It's the visual last test to see if I have
    gotten the css stuff right. The page will be updated each time a
    css change is made so it can be checked without having to hunt for
    content which uses a special construct.
**** Header level 4
     This page contains org-mode constructs as a test to see how they
     get rendered to html. It's the visual last test to see if I have
     gotten the css stuff right. The page will be updated each time a
     css change is made so it can be checked without having to hunt
     for content which uses a special construct.
***** Header level 5
      This page contains org-mode constructs as a test to see how they
      get rendered to html. It's the visual last test to see if I have
      gotten the css stuff right. The page will be updated each time a
      css change is made so it can be checked without having to hunt
      for content which uses a special construct
****** Header level 6
       This page contains org-mode constructs as a test to see how
       they get rendered to html. It's the visual last test to see if
       I have gotten the css stuff right. The page will be updated
       each time a css change is made so it can be checked without
       having to hunt for content which uses a special construct
******* Header level 7
	This page contains org-mode constructs as a test to see how
	they get rendered to html. It's the visual last test to see if
	I have gotten the css stuff right. The page will be updated
	each time a css change is made so it can be checked without
	having to hunt for content which uses a special construct
******** Header level 8
	 This page contains org-mode constructs as a test to see how
	 they get rendered to html. It's the visual last test to see
	 if I have gotten the css stuff right. The page will be
	 updated each time a css change is made so it can be checked
	 without having to hunt for content which uses a special
	 construct
********* Header level 9
	  This page contains org-mode constructs as a test to see how
	  they get rendered to html. It's the visual last test to see
	  if I have gotten the css stuff right. The page will be
	  updated each time a css change is made so it can be checked
	  without having to hunt for content which uses a special
	  construct


** Blockquotes

   #+BEGIN_QUOTE
   This paragraph was started with a begin_quote construct
   #+END_QUOTE

** Footnotes
   The documentation of =org-ruby= mentions support of footnotes, but
   the one[fn:named] I created here does not render very nicely I think. I
   would have expected there to be a link.

   Orgmode can do inline footnotes [fn:: Like this]

[fn:named] This is a footnote
** Lists
   - Level 1
     - Level 2
       - Level 3
	 - Level 4
	   - Level 5
	     - Level 6
   - [ ] orgmode has checkbox like list items
     - [ ] but these don't do anything special

   - term1 :: defined;
   - term2 :: defined;
   - term3 :: defined with [[http://example.com]] link
** Code blocks
   Code blocks can be produced in the usual way with #+BEGIN_SRC
   blocks in org-mode. Highlighting is automatic when a pygments lexer
   is available.

   #+BEGIN_SRC ruby
   def foo
     puts 'foo'
   end
   #+END_SRC

   Same construct with the -n switch, which should turn on line
   numbers:

   #+BEGIN_SRC ruby -n
   def foo
     puts 'foo'
   end
   #+END_SRC

   and the same construct with the +n switch, which should continue
   the linenumbering from the previous snippet

   #+BEGIN_SRC ruby +n
   def foo
     puts 'foo'
   end
   #+END_SRC

   Other code related embedding is for githubs gist facility

   #+BEGIN_HTML
   {% gist 5555251 result.md %}
   #+END_HTML

** Rules
   In orgmode a line on its own with nothing else but at least 5
   dashes is considered a rule.

   -----

   So, when we use 4 we should just get 4 dashes:
   ----

** Verse
   Orgmode has a verse construct, but that does not give output (at
   the time of writing):

   #+BEGIN_VERSE
      Great clouds overhead
      Tiny black birds rise and fall
      Snow covers Emacs

          -- AlexSchroeder
     #+END_VERSE
** Centered
   The center construct gets a text-align:center attribute, so this
   should work, given correct CSS.
   #+BEGIN_CENTER
     Everything should be made as simple as possible, \\
     but not any simpler
   #+END_CENTER
** Examples
   The example block format from orgmode
   #+BEGIN_EXAMPLE
     Some example from a text file.
   #+END_EXAMPLE
** LaTeX
   Orgmode has extensive support for LaTeX fragments, but this doesn't
   transfer well with the exporter in use.

   \begin{equation}
     x=\sqrt{b}
     \end{equation}

     If $a^2=b$ and \( b=2 \), then the solution must be
     either $$ a=+\sqrt{2} $$ or \[ a=-\sqrt{2} \].

    #+BEGIN_LATEX
    \begin{equation}
      x=\sqrt{b}
    \end{equation}

     If $a^2=b$ and \( b=2 \), then the solution must be
     either $$ a=+\sqrt{2} $$ or \[ a=-\sqrt{2} \].
    #+END_LATEX
** Test
   #+BEGIN_TEST
   In orgmode export this would be in a div with class test
   #+END_TEST

** Emphasis
  *single asterisks: bold*

  _single underscores: underline_

  /single forward slashes: italic/

  =single equal signs: code=

  +single plus signs: strike-through+

  ~single tildes: verbatim~

